// This is your Prisma schema file.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum CampaignType {
  CONTENT
  OUTBOUND_FOLLOW
}

enum EventType {
  FOLLOWED_ME
  UNFOLLOWED_ME
  I_FOLLOWED
  I_UNFOLLOWED
  FOLLOW_REQUEST_SENT
  PENDING_REQUEST_CANCELLED // As per SRD FR-1.3.3
}

enum AttributionReason {
  DISCOVERY
  INIT
  OP_CAMPAIGN
  // Add other reasons as needed for manual attribution
}

// --- MODELS ---

// Master table for every unique Instagram user.
model Profile {
  profile_pk                  Int      @id @default(autoincrement())
  current_username            String   @unique
  first_seen_ts               DateTime @default(now())
  notes                       String?

  // State flags for efficient filtering and status checks, as per SRD.
  is_active_follower          Boolean  @default(false) // Do they follow me?
  is_currently_following      Boolean  @default(false) // Do I follow them?
  is_pending_outbound_request Boolean  @default(false) // Did I send a follow request?

  // Relations
  interaction_events InteractionEvent[]
  tags               ProfileTag[]
  username_history   UsernameHistory[]
}

// Tracks historical usernames to handle renames.
model UsernameHistory {
  id         Int      @id @default(autoincrement())
  profile_pk Int
  username   String
  changed_at DateTime @default(now())

  profile Profile @relation(fields: [profile_pk], references: [profile_pk])

  @@index([profile_pk])
  @@index([username])
}

// An immutable log of every interaction.
model InteractionEvent {
  event_id   Int       @id @default(autoincrement())
  profile_pk Int
  event_type EventType
  event_ts   DateTime

  profile     Profile      @relation(fields: [profile_pk], references: [profile_pk])
  attribution Attribution?

  @@index([profile_pk])
  @@index([event_ts])
}

// Tracks creator's content or outreach efforts.
model Campaign {
  campaign_id   Int          @id @default(autoincrement())
  campaign_name String       @unique
  campaign_date DateTime
  campaign_type CampaignType @default(CONTENT)

  attributions Attribution[]
}

// Connects an event to a reason or a campaign.
model Attribution {
  attribution_id Int               @id @default(autoincrement())
  event_id       Int               @unique // An event can only have one attribution
  reason         AttributionReason
  campaign_id    Int?

  event    InteractionEvent @relation(fields: [event_id], references: [event_id])
  campaign Campaign?        @relation(fields: [campaign_id], references: [campaign_id])

  @@index([campaign_id])
}

// Tracks processed snapshot dates for idempotence, as per SRD FR-1.2.
model Snapshot {
  snapshot_date String   @id @unique // YYYY-MM-DD format
  processed_at  DateTime @default(now())
}

// Models for audience segmentation via tags.
model Tag {
  tag_id   Int    @id @default(autoincrement())
  tag_name String @unique

  profiles ProfileTag[]
}

model ProfileTag {
  profile_pk Int
  tag_id     Int

  profile Profile @relation(fields: [profile_pk], references: [profile_pk])
  tag     Tag     @relation(fields: [tag_id], references: [tag_id])

  @@id([profile_pk, tag_id])
}
